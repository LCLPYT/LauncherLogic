import org.ajoberstar.grgit.Tag

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

def privateProps = new Properties()
def privatePropsFile = file("private.properties")
if(privatePropsFile.exists())
    privatePropsFile.withInputStream { privateProps.load(it) }

ext {
    getHeadId = {
        return grgit.head().abbreviatedId
    }
    getHeadTag = {
        def headId = grgit.head().id
        def headTag = null

        grgit.tag.list().forEach {
            def tag = it as Tag
            if(tag.commit.id == headId) headTag = tag
        }

        return headTag
    }
    PRIVATE = privateProps
}

def getVersion(boolean strict = false) {
    def headTag = rootProject.ext.getHeadTag()
    def tagName = null
    if (headTag != null && (tagName = headTag.name).matches('^v[0-9]+\\.[0-9]+\\.[0-9]+$')) {
        return (tagName as String).substring(1)
    } else {
        if(strict) {
            if (headTag == null) throw new IllegalStateException("Commit HEAD is not tagged.")
            else throw new IllegalStateException("Commit HEAD tag '${tagName}' does not meet the required versioning scheme.")
        } else return "dev-${rootProject.ext.getHeadId()}" as String
    }
}

group 'work.lclpnet'
archivesBaseName = 'launcher-logic'
version getVersion()

sourceCompatibility = targetCompatibility = '16'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'info.picocli:picocli:4.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.tukaani:xz:1.8'

    implementation 'com.google.code.findbugs:jsr305:3.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

jar {
    manifest.attributes(
            'Main-Class': 'work.lclpnet.launcherlogic.LauncherLogic'
    )
}

shadowJar {
    dependencies {
        include(dependency('info.picocli:picocli:.*'))
        include(dependency('com.google.code.gson:gson:.*'))
        include(dependency('org.jsoup:jsoup:.*'))
        include(dependency('org.apache.commons:commons-compress:.*'))
        include(dependency('org.tukaani:xz:.*'))
    }

    // Relocate to prevent conflicts with other mods that include it
    relocate 'picocli', 'shadow.picocli'
    relocate 'com.google.gson', 'shadow.com.google.gson'
    relocate 'org.jsoup', 'shadow.org.jsoup'
    relocate 'org.apache.commons.compress', 'shadow.org.apache.commons.compress'
    relocate 'org.tukaani.xz', 'shadow.org.tukaani.xz'

    archiveClassifier.set('') // Replace the default JAR
}

tasks.build.dependsOn('shadowJar')

tasks.publish.dependsOn({
    def versionTest = getVersion(true)
    println("Publishing version '${versionTest}'...")
})

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java

            pom {
                name = 'LauncherLogic'
                description = 'A java program to manage some actions from the LCLPLauncher.'
            }
        }
    }
    repositories {
        maven {
            if (privateProps.containsKey('mavenPassword')
                    && privateProps.containsKey('mavenHost')
                    && privateProps.containsKey('mavenUser')) {
                credentials {
                    username privateProps.getProperty('mavenUser')
                    password privateProps.getProperty('mavenPassword')
                }
                url privateProps.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}
